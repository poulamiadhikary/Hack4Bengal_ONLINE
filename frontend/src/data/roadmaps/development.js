export const developmentRoadmap = [
  {
    id: 1,
    title: 'frontend developer',
    category: 'development',
    roadmap: [
      { text: 'start with html – it’s the foundation of every website and helps structure the content like headings, paragraphs, links, and images.' },
      { text: 'next, learn css – it’s used to style your html content with colors, fonts, spacing, and layouts.' },
      { text: 'then dive into javascript – this adds interactivity like sliders, modals, or form validation.' },
      { text: 'understand how the dom works and how to manipulate it using javascript.' },
      { text: 'explore responsive design using media queries and flexible layouts so your site looks good on all devices.' },
      { text: 'learn version control with git and github – essential for tracking changes and collaboration.' },
      { text: 'pick a frontend framework like react (most popular), vue, or angular to build dynamic user interfaces.' },
      { text: 'understand web accessibility and basic seo so your websites are usable and discoverable.' },
      { text: 'learn how to bundle and deploy your frontend code using tools like vite, webpack, or parcel.' },
    ],
  },
  {
    id: 2,
    title: 'backend developer',
    category: 'development',
    roadmap: [
      { text: 'start by understanding how the web works – http, servers, clients, and apis.' },
      { text: 'choose a backend language like node.js, python, java, or go – any of these can help you build a solid foundation.' },
      { text: 'learn how to set up a server, create routes, and handle requests and responses.' },
      { text: 'work with databases – start with relational ones like mysql or postgresql, and also explore nosql like mongodb.' },
      { text: 'learn about rest apis – how to create them and consume them.' },
      { text: 'implement authentication and authorization – things like login, jwt, sessions, and roles.' },
      { text: 'understand error handling, logging, and environment variables for scalable backend systems.' },
      { text: 'get familiar with deployment – learn how to deploy your backend on platforms like render, heroku, or aws.' },
      { text: 'explore async processing, caching, and job queues as you go deeper.' },
    ],
  },
  {
    id: 3,
    title: 'full stack developer',
    category: 'development',
    roadmap: [
      { text: 'start with html, css, and javascript to build the frontend side of your application.' },
      { text: 'then pick a backend language – node.js or python are good for beginners.' },
      { text: 'learn how to connect your frontend to backend using rest apis or graphql.' },
      { text: 'work with databases to store and retrieve data – use mysql, postgresql, or mongodb.' },
      { text: 'implement user authentication so users can register, log in, and manage sessions.' },
      { text: 'learn git and github to manage code and collaborate with others.' },
      { text: 'deploy your full stack app using platforms like vercel, netlify, or render.' },
      { text: 'build real-world projects – like a blog, chat app, or task manager to solidify your skills.' },
      { text: 'gradually explore more advanced concepts like websockets, testing, and microservices.' },
    ],
  },
  {
    id: 4,
    title: 'mobile app developer',
    category: 'development',
    roadmap: [
      { text: 'start by understanding the basics of mobile apps and the differences between android and ios platforms.' },
      { text: 'learn java or kotlin if you want to build native android apps, and swift if you’re going for ios.' },
      { text: 'or, choose a cross-platform framework like flutter or react native to build for both using one codebase.' },
      { text: 'understand mobile ui/ux design principles – things like touch gestures, screen sizes, and navigation patterns.' },
      { text: 'learn how to manage data using local storage or sqlite, and how to make api calls for dynamic content.' },
      { text: 'explore features like camera, gps, push notifications, and permissions.' },
      { text: 'test your app on emulators and real devices to make sure it works well in different environments.' },
      { text: 'learn how to publish apps to the google play store and apple app store following their guidelines.' },
      { text: 'explore monetization options – ads, subscriptions, or in-app purchases.' },
    ],
  },
  {
    id: 5,
    title: 'java full stack developer',
    category: 'development',
    roadmap: [
      { text: 'start with core java – understand basics like variables, loops, oops concepts, and exception handling.' },
      { text: 'move to advanced java – learn about servlets, jsp, and jdbc for dynamic web applications.' },
      { text: 'learn spring framework – especially spring boot for creating microservices and rest apis easily.' },
      { text: 'use hibernate or jpa to interact with databases in an object-oriented way.' },
      { text: 'on the frontend, learn html, css, and javascript to create basic ui.' },
      { text: 'pick a frontend framework like angular or react to build dynamic and interactive interfaces.' },
      { text: 'connect your frontend to backend using rest apis and json data.' },
      { text: 'use maven or gradle for dependency management and project setup.' },
      { text: 'build and deploy full stack projects – like e-commerce, job portals, or admin dashboards.' },
    ],
  },
  {
    id: 6,
    title: '.net developer',
    category: 'development',
    roadmap: [
      { text: 'start by learning c# – it’s the primary language used for .net development.' },
      { text: 'understand object-oriented programming and how it applies in building real applications.' },
      { text: 'explore .net framework and .net core/.net 6+ to build web, desktop, or api-based applications.' },
      { text: 'learn asp.net core – this is used to build scalable and high-performance web applications.' },
      { text: 'get familiar with entity framework core to interact with databases using orm.' },
      { text: 'understand mvc (model-view-controller) architecture to separate concerns in your code.' },
      { text: 'work with databases like sql server and use linq to query data effectively.' },
      { text: 'practice building restful apis using controllers and endpoints in asp.net core.' },
      { text: 'learn how to host and deploy .net apps on azure or iis.' },
    ],
  },
  {
    id: 7,
    title: 'python developer',
    category: 'development',
    roadmap: [
      { text: 'start with the basics of python – variables, loops, functions, and data structures.' },
      { text: 'learn object-oriented programming in python – classes, inheritance, and encapsulation.' },
      { text: 'work on real-world problems using python – like file handling, web scraping, or automation.' },
      { text: 'choose a path – web development with flask or django, data science, or automation.' },
      { text: 'if going web, learn how to build apis with flask or django rest framework.' },
      { text: 'practice with databases using sqlite, mysql, or postgresql and integrate them into your projects.' },
      { text: 'write clean, modular code and learn how to test it using unittest or pytest.' },
      { text: 'explore virtual environments and pip for package management.' },
      { text: 'build projects – like blog sites, portfolio websites, or task apps to strengthen your skills.' },
    ],
  },
  {
    id: 8,
    title: 'go developer',
    category: 'development',
    roadmap: [
      { text: 'start by learning the basics of go (golang) – syntax, variables, functions, and control structures.' },
      { text: 'understand go’s strong typing and how it handles concurrency using goroutines and channels.' },
      { text: 'explore go modules for dependency management and how to structure go projects.' },
      { text: 'learn how to build web servers using net/http and create restful apis.' },
      { text: 'work with databases using packages like sqlx, gorm, or the database/sql standard library.' },
      { text: 'write unit tests using go’s built-in testing package and practice good testing habits.' },
      { text: 'explore middleware, routing, and request handling using frameworks like gin or echo.' },
      { text: 'learn how to build cli tools using cobra or urfave/cli for practical utilities.' },
      { text: 'deploy your go apps as standalone binaries or using docker containers.' },
    ],
  },
  {
    id: 9,
    title: 'node.js developer',
    category: 'development',
    roadmap: [
      { text: 'start with core javascript – since node.js is a runtime for running js on the server.' },
      { text: 'understand the event loop, async programming, and callback patterns in node.' },
      { text: 'learn how to build a basic web server using http module and move to express.js for easier routing and middleware.' },
      { text: 'connect your app to databases like mongodb or postgresql using mongoose or knex.' },
      { text: 'build rest apis and practice with real-world endpoints – like auth, posts, and comments.' },
      { text: 'manage environment variables and learn best practices for folder structure and error handling.' },
      { text: 'explore middleware, jwt authentication, and file uploads with express.' },
      { text: 'write tests using jest, mocha, or supertest to ensure your apis work correctly.' },
      { text: 'deploy your app using services like render, vercel, or heroku.' },
    ],
  },
  {
    id: 10,
    title: 'game developer',
    category: 'development',
    roadmap: [
      { text: 'start by picking a language – c# for unity or c++ for unreal engine are both solid choices.' },
      { text: 'learn the basics of game design – how game loops, rules, and player interactions work.' },
      { text: 'get familiar with a game engine – unity is beginner-friendly and supports both 2d and 3d games.' },
      { text: 'practice creating game scenes, importing assets, and handling input like keyboard, mouse, or touch.' },
      { text: 'learn how to implement physics, animations, and collision detection.' },
      { text: 'use tools like blender or photoshop for creating and editing game assets.' },
      { text: 'understand how to manage game state – things like player health, scores, and inventory.' },
      { text: 'optimize your game for performance – reduce lag and improve loading times.' },
      { text: 'learn how to publish your game on platforms like steam, itch.io, google play, or the app store.' },
    ],
  },
];
